// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using log_data_well.Data;

#nullable disable

namespace log_data_well.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20240321023037_ChangePath")]
    partial class ChangePath
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("log_data_well.Data.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClientID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("log_data_well.Data.MeasurementType", b =>
                {
                    b.Property<int>("MeasurementTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasurementUnits")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MeasurementTypeID");

                    b.ToTable("MeasurementTypes");
                });

            modelBuilder.Entity("log_data_well.Data.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeasurementID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SpecialistID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WellMeasurementMeasurementID")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderID");

                    b.HasIndex("ClientID");

                    b.HasIndex("SpecialistID");

                    b.HasIndex("WellMeasurementMeasurementID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("log_data_well.Data.Specialist", b =>
                {
                    b.Property<int>("SpecialistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SpecializationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SpecialistID");

                    b.HasIndex("SpecializationID");

                    b.ToTable("Specialists");
                });

            modelBuilder.Entity("log_data_well.Data.Specialization", b =>
                {
                    b.Property<int>("SpecializationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SpecializationID");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("log_data_well.Data.Well", b =>
                {
                    b.Property<int>("WellID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Depth")
                        .HasColumnType("REAL");

                    b.Property<string>("GeoCoordinates")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WellTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("WellID");

                    b.HasIndex("WellTypeID");

                    b.ToTable("Wells");
                });

            modelBuilder.Entity("log_data_well.Data.WellMeasurement", b =>
                {
                    b.Property<int>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MeasurementDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeasurementTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MeasurementValue")
                        .HasColumnType("REAL");

                    b.Property<int>("WellID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MeasurementID");

                    b.HasIndex("MeasurementTypeID");

                    b.HasIndex("WellID");

                    b.ToTable("WellMeasurements");
                });

            modelBuilder.Entity("log_data_well.Data.WellType", b =>
                {
                    b.Property<int>("WellTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WellTypeID");

                    b.ToTable("WellTypes");
                });

            modelBuilder.Entity("log_data_well.Data.Order", b =>
                {
                    b.HasOne("log_data_well.Data.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("log_data_well.Data.Specialist", "Specialist")
                        .WithMany()
                        .HasForeignKey("SpecialistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("log_data_well.Data.WellMeasurement", "WellMeasurement")
                        .WithMany()
                        .HasForeignKey("WellMeasurementMeasurementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Specialist");

                    b.Navigation("WellMeasurement");
                });

            modelBuilder.Entity("log_data_well.Data.Specialist", b =>
                {
                    b.HasOne("log_data_well.Data.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("log_data_well.Data.Well", b =>
                {
                    b.HasOne("log_data_well.Data.WellType", "WellType")
                        .WithMany()
                        .HasForeignKey("WellTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellType");
                });

            modelBuilder.Entity("log_data_well.Data.WellMeasurement", b =>
                {
                    b.HasOne("log_data_well.Data.MeasurementType", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("log_data_well.Data.Well", "Well")
                        .WithMany()
                        .HasForeignKey("WellID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementType");

                    b.Navigation("Well");
                });
#pragma warning restore 612, 618
        }
    }
}
